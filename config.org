#+TITLE: Doom emacs config
#+STARTUP: overview
#+PROPERTY: header-args :comment org :results silent :tangle yes
* Doom
#+begin_src emacs-lisp :tangle yes
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!


Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.
#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Mathias Nielsen"
      user-mail-address "mnie@demant.com")

;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(setq doom-font (font-spec :family "Hasklig" :size 14))
(setq doom-variable-pitch-font (font-spec :family "Verdana" :size 12))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-nord)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
;; they are implemented.

#+end_src

#+begin_src emacs-lisp :tangle yes
(setq doom-localleader-key "SPC m"
      doom-localleader-alt-key "M-SPC m")
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun doom/ediff-init-and-example ()
  "ediff the current `init.el' with the example in doom-emacs-dir"
  (interactive)
  (ediff-files (concat doom-private-dir "init.el")
               (concat doom-emacs-dir "init.example.el")))

(define-key! help-map
  "di"   #'doom/ediff-init-and-example
  )
#+end_src
* Server mode

Add some bindings for server manipulation
#+begin_src emacs-lisp :tangle yes :results silent
(map!
 :leader
 :prefix ("S" . "server")
 :desc "Start server" "s" 'server-start
 :desc "Edit server" "e" 'server-edit
 :desc "Delete server" "x" 'server-force-stop
 :desc "Switch to *server* buffer" "b" '(lambda () (switch-to-buffer server-buffer))
 )
#+end_src

Add hook to create new frame

#+begin_src emacs-lisp :tangle yes
(remove-hook 'server-visit-hook #'make-frame)
#+end_src
* Completion

** Selectrum
Using selectrum
#+begin_src elisp

(use-package! selectrum
  :hook (after-init . selectrum-mode)
  :init
  (setq enable-recursive-minibuffers t)
  :general
  (:keymaps 'selectrum-minibuffer-map
            :states '(normal insert)
            "C-h" #'selectrum-previous-page
            "C-l" #'selectrum-next-page
            "C-j" #'selectrum-next-candidate
            "C-k" #'selectrum-previous-candidate
            "C-p" #'selectrum-previous-candidate
            "C-n" #'selectrum-next-candidate
            "C-s" #'selectrum-select-current-candidate)
  (:states '(normal visual)
           :keymaps 'global
           "zs" #'selectrum-repeat))

(use-package! embark
  :defer t
  :init
  ;; (push '(("^[0-9-]\\|kp-[0-9]\\|kp-subtract\\|C-u$" . nil) . ignore)
  ;;     which-key-replacement-alist)
  :general
  (:keymaps 'selectrum-minibuffer-map
            "M-o" #'embark-act))

(use-package! marginalia
  :hook (selectrum-mode . marginalia-mode)
  :init)

(use-package! consult
  ;; :straight (:host github :repo "minad/consult" :branch "main") ;
  ;; :hook (selectrum-mode . consult-annotate-mode)

  :init
  (defun +consult-ripgrep-project (start end)
    "Use consult-ripgrep to search from project root."
    (interactive "r")
    (let* ((initial-text (if (region-active-p)
                             (buffer-substring-no-properties start end)
                           "")))
      (if (projectile-project-p)
        (consult-ripgrep (projectile-project-root) initial-text)
      (message "Not in project."))))
  (map! :leader
       (:prefix "s"
        :desc "Search project" "p" #'+consult-ripgrep-project))
  :general
  ("C-s" #'consult-line)
  (:states 'normal
           "go" #'consult-outline))

;; (use-package! consult-flycheck)

(use-package! consult-selectrum)

(use-package! prescient
  :defer t)

(use-package! selectrum-prescient
  :hook (selectrum-mode . selectrum-prescient-mode))
#+end_src

* OSX

#+begin_src emacs-lisp :tangle yes :results silent
(if (eq system-type 'darwin)
  ; something for OS X if true
  ; optional something if not
    (setq mac-command-modifier 'meta
          mac-option-modifier 'option)
)
#+end_src

* UI
** Default Frame size
#+begin_src emacs-lisp :tangle yes
(pushnew! default-frame-alist '(height . 40) '(width . 128))
#+end_src
** Theme
#+begin_src emacs-lisp :tangle no
(load-theme 'doom-nord t nil)
#+end_src
* Evil
** Evil
#+begin_src emacs-lisp :tangle yes
(map!
 :after evil
 :n "TAB" #'evil-toggle-fold)
#+end_src

** Evil-org

#+begin_src emacs-lisp :tangle yes :results silent
(use-package! evil-org
  :defer t
  :after org
  :config
  (evil-org-set-key-theme '(navigation insert textobjects return todo additional calendar)))
#+end_src

*** Bindings :bindings:
#+begin_src emacs-lisp :tangle yes
  (map!
   :after org
   :map org-mode-map
   ;; Map RET to open-at-point
   :n "RET" #'org-open-at-point
   ;; Navigate Visible headings
   :n "J" #'org-next-visible-heading
   :n "K" #'org-previous-visible-heading
   :n "L" #'org-show-subtree
   :n "H" #'org-cycle)
#+end_src
* Outlook
#+begin_src emacs-lisp :tangle yes
(use-package! outlookedit
  :defer t
  :commands mno-edit-outlook-message mno-put-outlook-message
  :config (setq mno-get-outlook-body (concat "cscript //Job:getMessage " (expand-file-name "~//bin//outlook_emacs.wsf"))
                mno-put-outlook-body (concat "cscript //Job:putMessage " (expand-file-name "~//bin//outlook_emacs.wsf"))))
#+end_src
** Bindings :bindings:
#+begin_src emacs-lisp :tangle yes
(map!
 :after outlookedit
 :leader
 :prefix ("oo" . "Outlook")
 :desc "Edit" "e" #'mno-edit-outlook-message
 :desc "Save" "s" #'mno-put-outlook-message)
#+end_src
* Major Modes
** Powershell
Edit powershell files

#+begin_src emacs-lisp :tangle yes
(use-package! powershell
  :mode ("\.ps[12]*" . powershell-mode)
:hook (powershell-mode . lsp)
:config
(map! :map powershell-mode-map
      :localleader
"s" #'powershell))
#+end_src
** Python
#+begin_src emacs-lisp :tangle yes
(use-package! pyvenv
  :hook (python-mode . pyvenv-mode)
  :init
  (add-to-list 'exec-path "~/.pyvenv/shims/")
  ;; (with-eval-after-load 'flycheck
  ;;   (setq flycheck-python-flake8-executable "python"
  ;;         flycheck-python-mypy-executable "python"
  ;;         flycheck-python-pycompile-executable "python"
  ;;         flycheck-python-pylint-executable "python"))
  ;; (setenv "WORKON_HOME" "~/.pyvenv/versions/")
  (defun +pyvenv-create-or-activate ()
    "Create or activate virtualenv in project-root."
    (interactive)
    (let ((workon_home (getenv "WORKON_HOME"))
          (root (or (projectile-project-root)
                    (directory-file-name default-directory)))
          (venv-name "venv"))
      (if (file-exists-p (format "%s/%s/Scripts" root venv-name))
          (pyvenv-activate (format "%s/%s" root venv-name))
        (progn
          (message "Create virtual env")
          (setenv "WORKON_HOME" root)
          (pyvenv-create venv-name (executable-find "python"))
          (pyvenv-activate (format "%s/%s" root venv-name))
          (setenv "WORKON_HOME" workon_home))))))
#+end_src

** nxml
#+begin_src emacs-lisp :tangle yes
(use-package! nxml-mode
  :defer t
  :mode ("\\.xml$" . nxml-mode)
  :init
  :config
  (setq nxml-auto-insert-xml-declaration-flag nil)
  (set-file-template! 'nxml-mode)
  )

(after! org
  (pushnew! +org-babel-mode-alist '(xml . nxml)))
#+end_src

** org :org:
*** General Setup
**** Inital setup
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-log-done 'time
        org-log-into-drawer t
        org-startup-folded nil))
#+end_src
**** Todo-keywords
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "WAITING(w!)" "|")
        (sequence "|" "CANCELLED(C!)")
        (sequence "ACTIVE(a)" "ON-HOLD(h@!)" "|" "COMPLETED(c!)")))

(setq org-treat-S-cursor-todo-selection-as-state-change nil))
#+end_src

Set todo keyword faces
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-todo-keyword-faces
    '(("TODO" . (t (:inherit org-todo)))
      ;;("STARTED" . (t (:inherit org-todo :foreground "green")))
      (("COMPLETED" "DONE") . (t (:inherit org-done :strike-through t)))
      ("ON-HOLD" . "orange"))))
#+end_src

**** Priorities
Set pritories ranging from A to D

| Priority | Description                                            |
|----------+--------------------------------------------------------|
| A        | Tasks that are urgent and important         (Do)       |
| B        | Tasks that are not urgent and important     (Defer)    |
| C        | Tasks that are urgent and not important     (Delegate) |
| D        | Tasks that are not urgent and not important (Delete)   |

#+begin_src emacs-lisp :tangle no
(after! org
 (setq org-priority-highest ?A
       org-priority-lowest ?D
       org-priority-default ?B
       ;; org-priority-faces '((?A . (:inherit 'error))
       ;;  		    (?B . (:inherit 'warning))
       ;;  		    (?C . (:inherit 'font-lock-string-face))
       ;;  		    (?D . (:inherit 'font-lock-comment-face
       ;;                             :italic t)))
       ))
#+end_src

**** Effort
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-global-properties '(("Effort_ALL" . "0 0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00"))
        org-columns-default-format "%40ITEM(Task) %17Effort(Estimated Effort){:} %CLOCKSUM"))
#+end_src
**** Capture templates
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/org/inbox.org" "Inbox")
           "* TODO [#C] %?")
          ("u" "Urgent Todo" entry (file+headline "~/org/gtd.org" "Misc")
           "* TODO [#A] %?"
           :jump-to-captured t)
          ("p" "Project" entry (file+headline "~/org/gtd.org" "Misc")
          "* ACTIVE %? [%] :project:")
          ("i" "Tickler" entry (file+olp+datetree "~/org/tickler.org")
           "* %?")
          ("l" "link" plain (file "~/org/links.org")
           "[[%^{Link}][%^{Description}]]")
          )))
#+end_src
**** Tags
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-tag-alist '(
                        (:startgroup . nil)
                        ("@localpc" . ?l) ("@devpc" . ?d) ("@kbn" . ?k)
                        (:endgroup .nil)
                        (:newline . nil)
                        ("project" . ?p) ("noexport" . ?n))))
#+end_src

*** UI :ui:
**** Faces
Taken from [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/]]

#+begin_src emacs-lisp :tangle yes
(after! org
  (let* ((base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight normal :foreground ,base-font-color)))

    (custom-theme-set-faces
     'user
     `(org-link ((t (:foreground ,base-font-color :underline t))))
     `(org-list-dt ((t (:foreground ,base-font-color :weight bold))))
     `(org-level-8 ((t (,@headline))))
     `(org-level-7 ((t (,@headline))))
     `(org-level-6 ((t (,@headline))))
     `(org-level-5 ((t (,@headline))))
     `(org-level-4 ((t (,@headline :height 1.0))))
     `(org-level-3 ((t (,@headline :height 1.0))))
     `(org-level-2 ((t (,@headline :height 1.0))))
     `(org-level-1 ((t (,@headline :height 1.2 :weight bold))))
     `(org-document-title ((t (,@headline :height 1.5 :underline nil :weight bold))))
     ;; org-agenda-faces
     `(org-agenda-structure ((t (,@headline :height 1.2 :weight semi-bold :family "Segoe UI")))))))
#+end_src

**** Org-bullets

#+begin_src emacs-lisp :tangle yes
(use-package! org-superstar
  :defer t)
#+end_src

*** Org-Pomodoro

#+begin_src emacs-lisp :tangle yes
(use-package! org-pomodoro
  :defer t
  :config
  (setq org-pomodoro-audio-player (executable-find "vlc.exe"))
  )
#+end_src
*** Capture Templates
*** Agenda
**** General
#+begin_src emacs-lisp :tangle yes
  (setq org-agenda-files (list "~/org/gtd.org"))

  (setq org-stuck-projects '("+PROJECT" ("TODO" "NEXT") nil ""))

  (setq org-agenda-window-setup 'current-window)

  (setq org-agenda-start-on-weekday nil
        org-agenda-span 10
        org-agenda-start-day "0d")

  ;; Speed up org-agenda
  ;;
  (setq org-agenda-inhibit-startup t
        org-agenda-dim-blocked-tasks nil
        org-use-tag-inheritance nil
        org-agenda-use-tag-inheritance nil)

#+end_src
**** Agenda Files

#+begin_src emacs-lisp :tangle yes
(defun +org-notes-project-p ()
  "Return non-nil if current buffer has any todo entry.
TODO entries marked as done are ignored, meaning the this
function returns nil if current buffer contains only completed
tasks."
  (seq-find                                 ; (3)
   (lambda (type)
     (eq type 'todo))
   (org-element-map                         ; (2)
       (org-element-parse-buffer 'headline) ; (1)
       'headline
     (lambda (h)
       (org-element-property :todo-type h)))))

(defun +org-notes-project-update-tag ()
  "Update PROJECT tag in the current buffer."
  (when (and (not (active-minibuffer-window))
             (+org-notes-buffer-p))
    (let* ((file (buffer-file-name (buffer-base-buffer)))
           (all-tags (org-roam--extract-tags file))
           (prop-tags (org-roam--extract-tags-prop file))
           (tags prop-tags))
      (if (+org-notes-project-p)
          (setq tags (cons "Project" tags))
        (setq tags (remove "Project" tags)))
      (unless (eq prop-tags tags)
        (org-roam--set-global-prop
         "ROAM_TAGS"
         (combine-and-quote-strings (seq-uniq tags)))))))

(defun +org-notes-buffer-p ()
  "Return non-nil if the currently visited buffer is a note."
  (and buffer-file-name
       (string-prefix-p
        (expand-file-name (file-name-as-directory org-roam-directory))
        (file-name-directory buffer-file-name))))

(defun +org-notes-project-files ()
  "Return a list of note files containing Project tag."
   (seq-map
   #'car
   (org-roam-db-query
    [:select file
     :from tags
     :where (like tags (quote "%\"Project\"%"))])))

(defun +agenda-files-update (&rest _)
  "Update the value of `org-agenda-files'."
  (setq org-agenda-files (+org-notes-project-files)))

(add-hook 'find-file-hook #'+org-notes-project-update-tag)
(add-hook 'before-save-hook #'+org-notes-project-update-tag)

(advice-add 'org-agenda :before #'+agenda-files-update)
#+end_src
**** Super Agenda
#+begin_src emacs-lisp :tangle no
(use-package! org-super-agenda
  :defer t
  :after evil-org
  :config
  (add-hook 'evil-org-agenda-mode-hook #'org-super-agenda-mode))
#+end_src


**** Custom Agenda Views
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-agenda-custom-commands nil))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defmacro +mnie/add-org-agenda-custom-commands (&rest command)
  "Add new COMMAND to org-agenda-custom-commands sequentially"
  (let ((var (make-symbol "result")))
    `(dolist (,var (list ,@command) nil)
       (after! org (add-to-list 'org-agenda-custom-commands ,var)))))
#+end_src
***** Next Actions list :gtd:
#+begin_src emacs-lisp :tangle yes
(+mnie/add-org-agenda-custom-commands
               `("n" "Next Actions"
                  ((agenda "" ((org-agenda-overriding-header "Today")
                               (org-agenda-start-day nil)
                               (org-agenda-span 'day)
                               (org-agenda-files (quote ,(mapcar (lambda (f) (concat org-directory f)) '("gtd.org" "tickler.org"))))))
                   (alltodo "" ((org-agenda-overriding-header "On-going Tasks")
                                                 (org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("WAITING"))
                                                                                (org-agenda-skip-subtree-if 'todo '("ON-HOLD"))
                                                                                (org-agenda-skip-entry-if 'regexp ":project:")
                                                                                (org-agenda-skip-entry-if 'notregexp "CLOCK:")))))
                   (tags-todo "+PRIORITY=\"A\"" ((org-agenda-overriding-header "High Priority")
                                                 ))
                   (tags-todo "PRIORITY=\"B\"|PRIORITY=\"C\"" ((org-agenda-overriding-header "Medium Priority")
                                                               (org-agenda-sorting-strategy '(priority-down))
                                                               )))
                  ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("STARTED" "WAITING"))
                                                  (org-agenda-skip-subtree-if 'todo '("ON-HOLD"))
                                                  (org-agenda-skip-entry-if 'regexp ":project:")
                                                  (org-agenda-skip-entry-if 'regexp "CLOCK:"))))))
#+end_src
***** GTD Contexts
#+begin_src emacs-lisp :tangle yes
(+mnie/add-org-agenda-custom-commands  '("c" . "Contexts")
                                       '("cl" "@localpc" tags-todo "@localpc")
                                       '("cd" "@devpc" tags-todo "@devpc")
                                       '("ck" "@kbn" tags-todo "@kbn")
                                       '("ce" "@emacs" tags-todo "@emacs"))
#+end_src
***** Review :gtd:
[[https://gettingthingsdone.com/2018/08/episode-43-the-power-of-the-gtd-weekly-review/][The 11 steps of the weekly review]]
+ Get Clear
   1) Collect everything
   2) Get "IN" to ZERO
   3) Empty Your head
+ Get Current
   1) Review Next Actions List
+ Get Creative
#+begin_src emacs-lisp :tangle yes
(after! org
  (add-to-list 'org-agenda-custom-commands '("r" . "Review") t))
#+end_src

****** Daily Review
#+begin_src emacs-lisp :tangle yes
(after! org
  (add-to-list 'org-agenda-custom-commands
               '("rd" "Daily Review"
                 ((todo "" ((org-agenda-overriding-header "Inbox")
                            (org-agenda-files (list (expand-file-name "inbox.org" org-directory)))))
                  (todo "" ((org-agenda-overriding-header "Process")
                            (org-agenda-skip-function '(or (org-agenda-skip-entry-if 'regexp ":project:")
                                                           (and (org-agenda-skip-entry-if 'regexp ":@\\w+:"))))))
                  (tags-todo "refine" ((org-agenda-overriding-header "Refine")))))))
#+end_src
****** Weekly Review


**** Agenda view icons

Setup agenda view to only show category icon

#+BEGIN_SRC emacs-lisp :tangle yes
(after! org
  (setq org-agenda-prefix-format '((agenda . " %-1i %-12c %?-12t% s")
                                (todo . " %-1i %-12c ")
                                (tags . " %-1i  %-12c")
                                (search . " %-1i  %-12c ")))

  (setq org-agenda-category-icon-alist
      `(
        ("Review" ,(list (all-the-icons-material "library_books")) nil nil :ascent center)
        ("Reading" ,(list (all-the-icons-material "library_books")) nil nil :ascent center)
        ("Development" ,(list (all-the-icons-material "computer")) nil nil :ascent center)
        ("Planning" ,(list (all-the-icons-octicon "calendar")) nil nil :ascent center)
        ("Personal" ,(list (all-the-icons-material "person")) nil nil :ascent center)
        ("Misc" ,(list (all-the-icons-octicon "checklist")) nil nil :ascent center)
        ("" ,(list (all-the-icons-material "library_books")) nil nil :ascent center)))
)
#+END_SRC
**** Custom links
#+begin_src emacs-lisp :tangle yes
(after! org
  (pushnew! org-link-abbrev-alist
            '("rqm" . "https://clm.dgs.com/qm/web/console/System%20Verification%20for%20projects%20and%20products#action=com.ibm.rqm.planning.home.actionDispatcher&subAction=viewTestCase&id=%s")
            '("jira" . "https://jira.kitenet.com/browse/%s"))
  )
#+end_src
*** Publish

#+begin_src emacs-lisp :tangle yes
(setq org-publish-project-alist '(
                                  ("deft-html"
                                   :base-directory "~/.deft/"
                                   :base-extension  "org"
                                   :publishing-directory "~/html_export/.deft"
                                   :publishing-function org-html-publish-to-html
                                   )
                                  ("deft-media"
                                   :base-directory "~/.deft/media/"
                                   :base-extension "png\\|svg"
                                   :publishing-directory "~/html_export/.deft/media"
                                   :publishing-function org-publish-attachment)
                                  ("deft-docx"
                                   :base-directory "~/.deft/"
                                   :base-extension "org"
                                   :publishing-directory "~/docx_export/.deft/"
                                   :publishing-function org-pandoc-export-to-docx
                                   )))
#+end_src
** Org Roam
#+begin_src emacs-lisp :tangle yes
(use-package! org-roam
  :defer t
  :init
  (setq org-roam-db-update-method 'immediate))
#+end_src
** deft
#+begin_src emacs-lisp :tangle yes
(use-package! deft
  :defer t
  :init
  (setq deft-directory org-roam-directory
        deft-use-filter-string-for-filename nil
        deft-use-filename-as-title nil)
  (advice-add #'deft-complete :after '(lambda () (kill-buffer "*Deft*")))
  (map!
   :map deft-mode-map
   :i "C-j" #'evil-next-line
   :i "C-k" #'evil-previous-line))
#+end_src

** Plantuml
#+begin_src emacs-lisp :tangle yes
(use-package! plantuml-mode
  :defer t
  :init
  (setq plantuml-default-exec-mode 'jar
        plantuml-jar-path (expand-file-name "~/bin/plantuml.jar")))
#+end_src
** Misc
*** open .err-files as text-mode
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("\\.err$" . text-mode))
(add-to-list 'auto-mode-alist '("\\.out$" . text-mode))
#+end_src


* Minor Modes
** Company
#+begin_src emacs-lisp :tangle yes
(use-package! company
  :defer t
  :config
  (setq company-minimum-prefix-length 1
        company-show-numbers t))
#+end_src
** Projectile/Workspaces

#+begin_src emacs-lisp :tangle yes
(use-package! projectile
  :defer t
  :init
  (defun mnie/switch-project ()
    "Switch project and create new workspace."
    (+workspaces-set-project-action-fn)
    (+workspaces-switch-to-project-h))
  :config
  (setq projectile-switch-project-action #'mnie/switch-project))
#+end_src
